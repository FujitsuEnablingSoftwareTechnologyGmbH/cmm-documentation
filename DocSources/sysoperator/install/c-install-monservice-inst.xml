<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
                         "concept.dtd" [<!ENTITY % entities PUBLIC '-//XDOC//ENTITIES//FujitsuUserDoc' 'entities.dtd'>
]>
<!-- Copyright FUJITSU LIMITED 2017 -->
<concept id="concept_E8D43EB4494E41D2AB42D4A89396D1AB"
                xml:lang="en-us">
    <title>Installation</title>
    <conbody>
        <section>
            <p>To install the Monitoring Service, proceed as follows:</p>
            <ol compact="no">
                <li>
                    <p>Log in to the machine on which to install the Monitoring Service (<ph
                            conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"/> node).</p>
                </li>
                <li>
                    <p>Prepare an installation directory. </p>
                </li>
                <li>
                    <p>Extract the <codeph>CMM_server_2.0.x.zip</codeph> archive file from the <ph
                            conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                        /> installation package to the installation directory. The archive provides the following files:</p>
                    <ul>
                        <li>
                            <p><codeph>CMM_server_2.0.x_images.tar</codeph>
                            </p>
                        </li>
                        <li>
                            <p><codeph>docker-compose-Linux-x86_64_1.15.0</codeph></p>
                        </li>
                        <li>
                            <p><codeph>docker-compose-metric.yml</codeph></p>
                        </li>
                        <li>
                            <p><codeph>docker-compose-log.yml</codeph></p>
                        </li>
                        <li>
                            <p><codeph>.env</codeph></p>
                        </li>
                    </ul>
                </li>
                <li>
                    <p>Open the <codeph>.env</codeph> file to make the adaptions required for your environment.</p>
                </li>
                <li>
                    <p>For integrating the Monitoring Service with OpenStack Keystone, you have to specify the following parameters:</p>
                    <codeblock># Set the IPv4 address of the OpenStack Keystone host
MON_KEYSTONE_URL=http://&lt;ip_address>:5000

# Enable Kibana authorization (for token received from Horizon Plugin)
MON_MONASCA_PLUGIN_ENABLED=True

# Set the path to mount Kibana to the Horizon proxy (leave as is).
MON_BASE_PATH=/dashboard/monitoring/logs_proxy

# Define the Grafana user settings
MON_GRAFANA_ADMIN_USER=&lt;Grafana_admin>
MON_GRAFANA_ADMIN_PASSWORD=&lt;Grafana_admin_password>
MON_GRAFANA_USERNAME=&lt;OpenStack_admin>
MON_GRAFANA_PASSWORD=&lt;OpenStack_admin_password></codeblock>
                    <ul>
                        <li>
                            <p>Replace <codeph>&lt;ip_address></codeph> by the IP address of the node on which the OpenStack Keystone service is deployed. Example URL: <codeph>http://172.31.0.216:5000</codeph>. </p>
                        </li>
                        <li>
                            <p>Set the <codeph>MON_MONASCA_PLUGIN_ENABLED</codeph> parameter to <codeph>True</codeph>.</p>
                        </li>
                        <li>
                            <p>Set the <codeph>MON_BASE_PATH</codeph> parameter to <codeph>/dashboard/monitoring/logs_proxy</codeph>.</p>
                        </li>
                        <li>
                            <p>Replace <codeph>&lt;Grafana_admin></codeph> and <codeph>&lt;Grafana_admin_password></codeph> by the credentials of a Grafana administrator. This user is created with installing the Monitoring Service and required for Grafana user management. It must be different from the OpenStack <codeph>admin</codeph> user. </p>
                        </li>
                        <li>
                            <p>Replace <codeph>&lt;OpenStack_admin></codeph> and <codeph>&lt;OpenStack_admin_password></codeph> by the credentials of the OpenStack <codeph>admin</codeph> user. By default, the <codeph>admin</codeph> user is used for installing the Monasca data source in Grafana. </p>
                        </li>
                    </ul>
                </li>
                <li>
                    <p>For enabling access to OpenStack Keystone, you have to specify credentials for the Metrics Agent and Log Agent, as well as for the Monitoring API and the Log API in the <codeph>OpenStack Keystone credentials</codeph> section: </p>
                    <codeblock># Agent credentials 
MON_AGENT_USERNAME=&lt;user_name>
MON_AGENT_PASSWORD=&lt;password>
MON_AGENT_PROJECT_NAME=&lt;project_name>

# Admin credentials
MON_KEYSTONE_ADMIN_USER=&lt;OpenStack_admin>
MON_KEYSTONE_ADMIN_PASSWORD=&lt;OpenStack_admin_password></codeblock>
                    <ul>
                        <li>
                            <p>Replace <codeph>&lt;user_name></codeph> and <codeph>&lt;password></codeph> by the credentials of the user used for authenticating the agents against OpenStack Keystone, and replace <codeph>&lt;project_name></codeph> by the name of the OpenStack project for which data is to be retrieved by the agents.</p>
                            <p>The names and passwords that you enter must correspond to the project and agent user you have already prepared for the integration of <ph
                                    conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> with OpenStack. For details, refer to <xref href="c-install-ksconfig-users.xml"
                                />. </p>
                            <p>Example:</p>
                            <codeblock># Set the agent credentials 
MON_AGENT_USERNAME=monasca-agent
MON_AGENT_PASSWORD=password
MON_AGENT_PROJECT_NAME=monasca</codeblock>
                        </li>
                        <li>
                            <p>Replace <codeph>&lt;OpenStack_admin></codeph> and <codeph>&lt;OpenStack_admin_password></codeph> by the credentials of the OpenStack <codeph>admin</codeph> user. By default, the <codeph>admin</codeph> user is used for authenticating the Monitoring API and the Log API against OpenStack Keystone. </p>
                        </li>
                    </ul>
                </li>
                <li>
                    <p>The installation of the Monitoring Service mounts <codeph>/opt/monasca-containers</codeph> as default volume for the data directories of Elasticsearch, InfluxDB, MySQL, Kafka, and Grafana. </p>
                    <p>If required, you can update the <codeph>MON_DOCKER_VOL_ROOT</codeph> parameter in the <codeph>Data directories</codeph> section, and specify a different volume.</p>
                    <codeblock># Set the path for the data directories of Elasticsearch,  
# InfluxDB, MySQL, Kafka, and Grafana
MON_DOCKER_VOL_ROOT=&lt;path_to_data_directories></codeblock>
                </li>
                <li>
                    <p>The installation of the Monitoring Service mounts <codeph>/mount/backup</codeph> as default volume for backing up the databases. </p>
                    <p>If required, you can update the <codeph>MON_BACKUP_DIR</codeph> parameter, and specify a different volume.</p>
                    <codeblock># Set the path for backup directories
MON_BACKUP_DIR=&lt;path_to_backup_directoriesy></codeblock>
                </li>
                <li>
                    <p>By default, <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                        /> retains the data stored in the Elasticsearch and InfluxDB database for 60 days. Older data is automatically deleted.</p>
                    <p>If required, you can change the data retention parameters in the <codeph>Data retention</codeph> section.</p>
                    <codeblock># Data retention for Elasticsearch database 
# Delete job is executed every day at 12 a.m. UTC
MON_ELASTICSEARCH_DATA_RETENTION_DAYS=&lt;number_of_days>

# Data retention for InfluxDB database
MON_INFLUXDB_RETENTION=&lt;number of days>d</codeblock>
                    <p>Replace <codeph>&lt;number of days></codeph> by the number of days after which data is to be deleted.</p>
                    <p>Example:</p>
                    <codeblock>MON_ELASTICSEARCH_DATA_RETENTION_DAYS=30
MON_INFLUXDB_RETENTION=30d</codeblock>
                </li>
                <li>
                    <p>Add a logging entry to the Docker Compose files for each service. By default, Docker log files are not rotated or removed once the containers are started. You can configure data retention for the log files in the <codeph>docker-compose-metric.yml</codeph> and <codeph>docker-compose-log.yml</codeph> files. For example: </p>
                    <codeblock>log-api:
    image: myOrg/log-api:${MON_LOG_API_VERSION}
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"docker load -i CMM_server_2.0.2_images.tar</codeblock>
                    <p>You can also configure data retention for the  Docker engine (for all containers). For details, refer to the <xref
                            format="html" href="https://docs.docker.com/v1.12/compose/overview/" scope="external">
                            <u><i>Docker Compose documentation</i></u></xref> and search for <codeph>max-size</codeph>. </p>
                </li>
                <li>
                    <p>Load the tarred repository from the <codeph>CMM_server_2.0.x_images.tar</codeph> file. This restores both the images and the tags from the archive to your installation directory.</p>
                    <codeblock>$ docker load -i CMM_server_2.0.x_images.tar</codeblock>
                </li>
                <li>
                    <p>Check that the images and tags required for the installation have been loaded.</p>
                    <codeblock>$ docker images</codeblock>
                </li>
                <li>
                    <p>Run <codeph>docker-compose</codeph>.</p>
                    <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml up</codeblock>
                    <note othertype="note">
                        <p>Make sure that the OpenStack Keystone service is up when running <codeph>docker-compose</codeph>. Refer to the <xref
                                format="html" href="https://docs.docker.com/compose/reference/up/" scope="external">
                                <u><i>Docker Compose documentation</i></u></xref> for details on the <codeph>docker-compose up</codeph> command.</p>
                    </note>
                </li>
            </ol>
            <p>After a successful deployment, the monitoring pipeline starts within approximately one minute. </p>
        </section>
        <section>
            <title><ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"/> Services</title>
            <p>By default, Docker Compose starts containers for the following services. They correspond to the main components of <ph
                    conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"/>: </p>
            <p>
                <table colsep="1" frame="all" rowsep="1">
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="2.00*"/>
                        <colspec colname="c2" colnum="2" colwidth="3.26*"/>
                        <!--colspec colname="c3" colnum="3" colwidth="2.87*"/ -->
                        <thead>
                            <row>
                                <entry>Service Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><codeph>agent-collector</codeph></entry>
                                <entry>Collector service of the Metrics Agent. Based on a configurable interval, the collector component collects the metrics data from the monitored services and servers.</entry>
                            </row>
                            <row>
                                <entry><codeph>agent-forwarder</codeph></entry>
                                <entry>Forwarder service of the Metrics Agent. The forwarder component takes the data from the collector and sends them to the Monitoring API.</entry>
                            </row>
                            <row>
                                <entry><codeph>elasticsearch</codeph></entry>
                                <entry>Elasticsearch database service. <ph
                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> stores the log data in this database.</entry>
                            </row>
                            <row>
                                <entry><codeph>grafana</codeph></entry>
                                <entry>Grafana service. <ph
                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> uses it to enable the integration with the OpenStack Keystone service and to include Monasca as Grafana data source.</entry>
                            </row>
                            <row>
                                <entry><codeph>influxdb</codeph></entry>
                                <entry>InfluxDB database service. <ph
                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> stores metrics and alarms in this database.</entry>
                            </row>
                            <row>
                                <entry><codeph>kafka</codeph>
                                </entry>
                                <entry>Message queue service.</entry>
                            </row>
                            <row>
                                <entry><codeph>kibana</codeph></entry>
                                <entry>Kibana server.</entry>
                            </row>
                            <row>
                                <entry><codeph>log-agent</codeph></entry>
                                <entry>Log Agent.</entry>
                            </row>
                            <row>
                                <entry><codeph>log-api</codeph></entry>
                                <entry>Log API.</entry>
                            </row>
                            <row>
                                <entry><codeph>log-metrics</codeph></entry>
                                <entry>Log Metrics.</entry>
                            </row>
                            <row>
                                <entry><codeph>log-persister</codeph></entry>
                                <entry>Log Persister. </entry>
                            </row>
                            <row>
                                <entry><codeph>log-transformer</codeph>
                                </entry>
                                <entry>Log Transformer. </entry>
                            </row>
                            <row>
                                <entry><codeph>memcached</codeph></entry>
                                <entry>Memcached service. <ph
                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> uses it for caching authentication and authorization information required for the communication between the Log API and OpenStack Keystone.</entry>
                            </row>
                            <row>
                                <entry><codeph>monasca</codeph></entry>
                                <entry>Monitoring API.</entry>
                            </row>
                            <row>
                                <entry><codeph>monasca-notification</codeph></entry>
                                <entry>Notification Engine. </entry>
                            </row>
                            <row>
                                <entry><codeph>monasca-persister</codeph></entry>
                                <entry>Persister. </entry>
                            </row>
                            <row>
                                <entry><codeph>mysql</codeph>
                                </entry>
                                <entry>MySQL database service. <ph
                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                    /> stores configuration information in this database. </entry>
                            </row>
                            <!-- row>
                                <entry><codeph>storm-nimbus</codeph></entry>
                                <entry>Storm is a distributed real-time computation system for processing large volumes of high-velocity data. The Storm Nimbus daemon is responsible for distributing code around a cluster, assigning tasks to machines, and monitoring for failures. </entry>
                            </row -->
                            <!-- row>
                                <entry><codeph>storm-supervisor</codeph></entry>
                                <entry>The Storm supervisor listens for work assigned to its machine and starts and stops worker processes as necessary based on what Nimbus has assigned to it.</entry>
                            </row -->
                            <row>
                                <entry><codeph>thresh</codeph></entry>
                                <entry>Threshold Engine. </entry>
                            </row>
                            <row>
                                <entry><codeph>zookeeper</codeph></entry>
                                <entry>Centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.</entry>
                            </row>
                            <!--row>
                                <entry><codeph>monasca-log-metrics</codeph></entry>
                                <entry>Log Guard.</entry>
                            </row -->
                        </tbody>
                    </tgroup>
                </table>
            </p>
            <p>In addition, Docker Compose starts a number of init containers that are used to bootstrap the Monitoring Service installation as well as a number of containers with direct dependencies to the services listed above.</p>
        </section>
    </conbody>
</concept>
