<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright FUJITSU ENABLING SOFTWARE TECHNOLOGY GMBH 2018 -->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
                         "concept.dtd" [<!ENTITY % entities PUBLIC '-//XDOC//ENTITIES//FujitsuUserDoc' 'entities.dtd'>
]>

<concept id="concept_E8D43EB4494E41D2AB42D4A89396D1AB"
                    xml:lang="en-us">
    <title>Databases</title>
    <conbody>
        <section>
                        <p>You need to create regular backups of the following databases on the host where the Monitoring Service is installed:</p>
                        <ul
                id="Elasticsearch_database_concept_conbody_section_1_ul">
                                <li>Elasticsearch database </li>
                                <li>InfluxDB database </li>
                                <li>MySQL database </li>
                        </ul>
                        <note othertype="note">
                                <p>It is recommended that backup and restore operations for databases are carried out by experienced operators only.</p>
                        </note>
                </section>
                <section>
                        <title>Elasticsearch Database</title>
                        <p>For backing up and restoring your Elasticsearch database, you can use the Snapshot and Restore module of Elasticsearch. You have to create a snapshot repository, before creating a regular backup of your database.</p>
                        <p>To create a snapshot repository, proceed as follows: </p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>To execute <codeph>curl</codeph> commands in the <codeph>elasticsearch</codeph> container, run <codeph>docker-compose exec</codeph> as follows:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml -f 
 docker-compose-log.yml exec elasticsearch /bin/bash</codeblock>
                                </li>
                                <li>
                                        <p>Change the owner of the backup directory in the <codeph>elasticsearch</codeph> container:</p>
                                        <codeblock>$ chown -R elasticsearch:elasticsearch /elasticsearch_backup</codeblock>
                                </li>
                                <li>
                                        <p>Create the snapshot repository.</p>
                                        <p>Example:</p>
                                        <codeblock>curl -XPUT http://localhost:9200/_snapshot/my_backup -d '{
  "type": "fs",
  "settings": {
       "location": "/elasticsearch_backup/my_backup",
       "compress": true
  }
}'</codeblock>
                                        <p>The example registers a shared file system repository (with <codeph>"type": "fs"</codeph>) that uses the <codeph>/elasticsearch_backup</codeph> directory for storing snapshots. The parent directory for storing snapshots was configured during the installation of the Monitoring Service (<codeph>MON_BACKUP_DIR</codeph> parameter in <codeph>.env</codeph> file). It must have been manually mounted before creating the snapshot. </p>
                                        <p id="compress_concept_conbody_section_2_o"
                                                ><codeph>compress</codeph> is turned on to compress the metadata files.</p>
                                </li>
                                <li>
                                        <p>Check whether the repository was created successfully.</p>
                                        <p>Example:</p>
                                        <codeblock>curl -XGET http://localhost:9200/_snapshot/my_backup</codeblock>
                                        <p>Example response for a successfully created repository:</p>
                                        <codeblock>{
  "my_backup": {
    "type": "fs",
    "settings": {
      "compress": "true",
      "location": "/elasticsearch_backup/my_backup"
    }
  }
}</codeblock>
                                </li>
                                <li>
                                        <p>Exit the <codeph>elasticsearch</codeph> container:</p>
                                        <codeblock>exit</codeblock>
                                </li>
                        </ol>
                        <p>As soon as you have successfully created the repository, you can create regular backups of the database. To create a backup, proceed as follows:</p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Start the <codeph>elasticsearch</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d elasticsearch</codeblock>
                                </li>
                                <li>
                                        <p>To execute <codeph>curl</codeph> commands in the <codeph>elasticsearch</codeph> container, run <codeph>docker-compose exec</codeph> as follows:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml -f 
 docker-compose-log.yml exec elasticsearch /bin/bash</codeblock>
                                </li>
                                <li>
                                        <p>Create a snapshot of your database that contains all indices. A repository can contain multiple snapshots of the same database. The name of a snapshot must be unique within the snapshots created for your database.</p>
                                        <p>Example:</p>
                                        <codeblock>curl -XPUT http://localhost:9200/_snapshot
 /my_backup/snapshot_1?wait_for_completion=true </codeblock>
                                        <p>The example creates a snapshot named <codeph>snapshot_1</codeph> for all indices in the <codeph>my_backup</codeph> repository.</p>
                                </li>
                                <li>
                                        <p>Exit the <codeph>elasticsearch</codeph> container:</p>
                                        <codeblock>exit</codeblock>
                                </li>
                                <li>
                                        <p>For easier portability and storage, you can create an archive file for the snapshot you have created. To configure the security context, the <codeph>--selinux</codeph> parameter must be specified. </p>
                                        <p>Example:</p>
                                        <codeblock>tar --selinux -zcvf es_snapshot_1.tar.gz -C 
 /mount/backup/elasticsearch_backup/ my_backup</codeblock>
                                </li>
                                <li>
                                        <p>Stop the <codeph>elasticsearch</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop elasticsearch</codeblock>
                                </li>
                                <li>
                                        <p>Start all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                        <p>To restore a database instance, proceed as follows:</p>
                        <ol id="Close_all_indices_of_your_dat_concept_conbody_section_2_o">
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Make sure that the backup of your database is available in the directory that was mounted before creating the snapshot.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Start the <codeph>elasticsearch</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d elasticsearch</codeblock>
                                </li>
                                <li>
                                        <p>To execute <codeph>curl</codeph> commands in the <codeph>elasticsearch</codeph> container, run <codeph>docker-compose exec</codeph> as follows:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml -f 
 docker-compose-log.yml exec elasticsearch /bin/bash</codeblock>
                                </li>
                                <li>
                                        <p>Close all indices of your database.</p>
                                        <p>Example:</p>
                                        <codeblock>curl -XPOST http://localhost:9200/_all/_close</codeblock>
                                        <p>If the call is successful, Elasticsearch returns <codeph>{"acknowledged":true}</codeph>.</p>
                                </li>
                                <li>
                                        <p>Restore all indices from the snapshot you have created.</p>
                                        <p>Example:</p>
                                        <codeblock>curl -XPOST http://localhost:9200/_snapshot
 /my_backup/snapshot_1/_restore</codeblock>
                                        <p>The example restores all indices from <codeph>snapshot_1</codeph> that is stored in the <codeph>my_backup</codeph> repository.</p>
                                        <p>If the call is successful, Elasticsearch returns <codeph>{"accepted":true}</codeph>.</p>
                                </li>
                                <li>
                                        <p>Exit the <codeph>elasticsearch</codeph> container:</p>
                                        <codeblock>exit</codeblock>
                                </li>
                                <li>
                                        <p>Stop the <codeph>elasticsearch</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop elasticsearch</codeblock>
                                </li>
                                <li>
                                        <p>Start all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                        <p id="For_additional_information_ba_concept_conbody_section_2_p"
                                        >For additional information on backing up and restoring an Elasticsearch database, refer to the <xref
                                        format="html"
                                        href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html"
                                        scope="external"><u><i>Elasticsearch documentation</i></u></xref>.</p>
                </section>
                <section>
                        <title>InfluxDB Database</title>
                        <!-- p>For backing up and restoring your InfluxDB database, you can use the InfluxDB shell. The shell is part of your InfluxDB distribution. If you installed InfluxDB via a package manager, the shell is, by default, installed in the <codeph>/usr/bin</codeph> directory.</p -->
                        <p>To create a backup of the database, proceed as follows:</p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Start the <codeph>influxdb</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d influxdb</codeblock>
                                </li>
                                <!-- li>
                                        <p>It is required to mount a directory for synchronizing the meta data and a directory for storing the database backup file on your local machine.</p>
                                        <p>For this purpose, execute the following command:</p>
                                        <codeblock>$ docker run ##rm -v $INFLUXDB_META_DIR:&lt;meta_data_dir> 
 -v $INFLUXDB_BACKUPS:&lt;backup_dir> influxdb:1.3.4-alpine</codeblock>
                                        <p>Replace <codeph>&lt;meta_data_dir></codeph> by the directory to be used for synchronizing the meta data, for example <codeph>/var/lib/influxdb</codeph>. </p>
                                        <p>Replace <codeph>&lt;backup_dir></codeph> by the directory to be used for storing the backup file, for example <codeph>/backup</codeph>. </p>
                                </li -->
                                <li>
                                        <p>For backing up the InfluxDB database, you need to know the ID of the container in which the database is running:</p>
                                        <codeblock>docker ps | grep influxd</codeblock>
                                        <p>Example output with <codeph>c6be4ebebefe</codeph> as container ID: </p>
                                        <codeblock>c6be4ebebefe   influxdb:1.3.4-alpine   "/entrypoint.sh infl…"   
19 hours ago  Up 6 seconds   8086/tcp   monascadocker_influxdb_1</codeblock>
                                </li>
                                <li>
                                        <p>Back up the database:</p>
                                        <codeblock>docker exec &lt;container_id> influxd backup -database &lt;db_name> 
 "/influxdb_backup/&lt;name>.backup"</codeblock>
                                        <p>Replace <codeph>&lt;container_id></codeph> by the ID of the container in which the database is running, <codeph>&lt;db_name></codeph> by the name of the database, and <codeph>&lt;name></codeph> by the name of the backup file to be created.</p>
                                        <p>The following example creates a backup of the <codeph>mon</codeph> database, running in container <codeph>07e9007e0be8</codeph>, in <codeph>mon.backup</codeph>:</p>
                                        <codeblock>docker exec c6be4ebebefe influxd backup 
 -database mon "/influxdb_backup/mon.backup"</codeblock>
                                </li>
                                <li>
                                        <p>Stop the <codeph>influxdb</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop influxdb</codeblock>
                                </li>
                                <li>
                                        <p>Start all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                        <!-- p>Before restoring the database, make sure that the container for the InfluxDB database is stopped.</p -->
                        <p>To restore the database, proceed as follows:</p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Make sure that the backup file is available in the <codeph>&lt;path_to_backup_dir>/influxdb_backup</codeph> directory. <codeph>&lt;path_to_backup_dir></codeph> is the default volume you configured for backing up the databases during the installation of the Monitoring Service (<codeph>MON_BACKUP_DIR</codeph> parameter in <codeph>.env</codeph> file). </p>
                                </li>
                                <li>
                                        <p>With SELinux enabled, make sure that <codeph>svirt_sandbox_file_t</codeph> is set as security context type for the backup file. </p>
                                        <p>Example with <codeph>MON_BACKUP_DIR</codeph> set to <codeph>/mount/backup</codeph>:</p>
                                        <codeblock># ls -lZ /mount/backup/influxdb_backup/
drwx------. root root system_u:object_r:svirt_sandbox_file_t:s0:c335,c530 mon.backup</codeblock>
                                </li>
                                <li>
                                        <p>Restore the database to an ephemeral container:</p>
                                        <codeblock># docker run --rm --entrypoint /bin/ash 
 -v &lt;path_to_data_dir>/influxdb:/var/lib/influxdb:Z 
 -v &lt;path_to_backup_dir>/influxdb_backup:/influxdb_backup:Z 
 influxdb:1.3.4-alpine 
 -c "influxd restore -metadir /var/lib/influxdb/meta 
 -datadir /var/lib/influxdb/data 
 -database &lt;db_name> /influxdb_backup/&lt;name>.backup"</codeblock>
                                        <p>Replace the variables as follows: </p>
                                        <ul>
                                                <li>
                                                        <p><codeph>&lt;path_to_data_dir></codeph> by the default volume you configured for the data directories during the installation of the Monitoring Service (<codeph>MON_DOCKER_VOL_ROOT</codeph> parameter in <codeph>.env</codeph> file).</p>
                                                </li>
                                                <li>
                                                        <p><codeph>&lt;path_to_backup_dir></codeph> by the default volume you configured for backing up the databases.</p>
                                                </li>
                                                <li>
                                                        <p><codeph>&lt;db_name></codeph> by the name of the database.</p>
                                                </li>
                                                <li>
                                                        <p>
                                                            <codeph>&lt;name></codeph> by the name of the backup file to be restored.</p>
                                                </li>
                                        </ul>
                                        <p>With SELinux enabled, <codeph>:Z</codeph> must be specified for the <codeph>-v</codeph> option.</p>
                                </li>
                                <!-- li>
                                        <p>Start the Docker container for the restored metastore.</p>
                                        <p>Example:</p>
                                        <codeblock>$ docker run ##rm -v $INFLUXDB_META_DIR:/var/lib/influxdb 
 -v $INFLUXDB_BACKUPS:/backups influxdb:1.3.4-alpine</codeblock>
                                </li -->
                                <li>
                                        <p>Start all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                </section>
                <section>
                        <title>MySQL Database</title>
                        <p id="For_backing_up_and_restoring_concept_conbody_section_4_p"
                                        >For backing up and restoring your MySQL database, you can use the <codeph>mysqldump</codeph> utility program. <codeph>mysqldump</codeph> performs a logical backup that produces a set of SQL statements. These statements can later be executed to restore the database.</p>
                        <p>To back up your MySQL database, proceed as follows:</p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Start the <codeph>mysql</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d mysql</codeblock>
                                </li>
                                <li>
                                        <p>Backup the database. To create the backup from your local machine, execute the following command:</p>
                                        <codeblock>docker exec &lt;container_id> mysqldump -u root --password=secretmysql 
 &lt;db_name> &gt; &lt;backup_dir>/&lt;name></codeblock>
                                        <p>Replace <codeph>&lt;container_id></codeph> by the ID of the container in which the database is running, <codeph>&lt;db_name></codeph> by the name of the database, <codeph>&lt;backup_dir></codeph> by the directory you have mounted for storing the backup file, and <codeph>&lt;name></codeph> by the name of the backup file to be created. </p>
                                        <p>For the <codeph>--password</codeph> parameter, check the <codeph>MYSQL_ROOT_PASSWORD</codeph> specified in the <codeph>docker-compose-metric.yml</codeph> file.</p>
                                        <p>The following example creates a backup of the <codeph>mon</codeph> database, running in container <codeph>07e9007e0be8</codeph>, in <codeph>/backup/mon.sql</codeph>:</p>
                                        <codeblock>docker exec 07e9007e0be8 mysqldump -u root --password=secretmysql 
 mon &gt; /backup/mon.sql</codeblock>
                                </li>
                                <li>
                                        <p>Check whether the backup was created successfully.</p>
                                </li>
                                <li>
                                        <p>Stop the <codeph>mysql</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop mysql</codeblock>
                                </li>
                                <li>
                                        <p>Start all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                        <p>To restore your MySQL database, proceed as follows:</p>
                        <ol>
                                <li>
                                        <p>Log in to the <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> node as a user with root privileges.</p>
                                </li>
                                <li>
                                        <p>Stop all <ph
                                                        conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                                                /> agents and services: </p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                                </li>
                                <li>
                                        <p>Start the <codeph>mysql</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d mysql</codeblock>
                                </li>
                                <li>
                                        <p>Restore the database:</p>
                                        <codeblock>cat &lt;backup_dir>/&lt;name> | docker exec -i &lt;container_id> 
 mysql -u root --password=secretmysql &lt;db_name></codeblock>
                                        <p>Replace <codeph>&lt;backup_dir></codeph> by the directory where the backup file is stored, <codeph>&lt;name></codeph> by the name of the file, <codeph>&lt;container_id></codeph> by the ID of the container in which the database is running, and <codeph>&lt;db_name></codeph> by the name of the database.</p>
                                        <p>For the <codeph>--password</codeph> parameter, check the <codeph>MYSQL_ROOT_PASSWORD</codeph> specified in the <codeph>docker-compose-metric.yml</codeph> file. </p>
                                        <p>The following example restores the <codeph>mon</codeph> database, running in container <codeph>07e9007e0be8</codeph>, from <codeph>/backup/mon.sql</codeph>:</p>
                                        <codeblock>cat /backup/mon.sql | docker exec -i 07e9007e0be8
 mysql -u root --password=secretmysql mon</codeblock>
                                </li>
                                <li>
                                        <p>Stop the <codeph>mysql</codeph> service:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop mysql</codeblock>
                                </li>
                                <li>
                                        <p>Start all <ph
                    conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"/> agents and services:</p>
                                        <codeblock>docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                                </li>
                        </ol>
                        <p id="For_additional_information_on_concept_conbody_section_4_p"
                                        >For additional information on backing up and restoring a MySQL database with <codeph>mysqldump</codeph>, refer to the <xref
                                                format="html" href="https://dev.mysql.com/doc/refman/5.5/en/backup-and-recovery.html"
                                        scope="external"><u><i>MySQL documentation</i></u></xref>.</p>
                </section>
    </conbody>
</concept>
