<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
                         "concept.dtd" [<!ENTITY % entities PUBLIC '-//XDOC//ENTITIES//FujitsuUserDoc' 'entities.dtd'>
]>
<!-- Copyright FUJITSU ENABLING SOFTWARE TECHNOLOGY GMBH 2018 -->
<concept id="concept_E8D43EB4494E41D2AB42D4A89396D1AB"
                    xml:lang="en-us">
    <title>Starting and Stopping Agents and Services</title>
    <conbody>
        <section>
            <p>System operation and maintenance may require that agents and services are manually stopped and restarted. </p>
            <p>The following sections describe:</p>
            <ul>
                <li>
                    Starting and stopping agents and services running in Docker containers on the <ph
                            conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"/> node.
                </li>
                <li>
                    Starting and stopping agents installed on an OpenStack node.
                </li>
            </ul>
        </section>
        <section>
            <title>Starting and Stopping the <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                /> Services and Agents</title>
            <p>You can start and stop all containerized services and agents with one command. You can also start and stop the agents and services individually.</p>
            <p>To start all agents and services, proceed as follows:</p>
            <ol>
                <li>
                    <p>Log in to the <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                        /> node.</p>
                </li>
                <li>
                    <p>Go to the installation directory.</p>
                </li>
                <li>
                    <p>Run <codeph>docker-compose up</codeph> as follows: </p>
                    <codeblock>$ docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml up -d</codeblock>
                    <note othertype="note">
                        <p>Make sure that the OpenStack Keystone service is up when executing the command. Use <codeph>-d</codeph> to start the containers in the background and leave them running when the command exits. Refer to the <xref
                                format="html" href="https://docs.docker.com/v1.12/compose/reference/up/" scope="external">
                                <u><i>Docker Compose documentation</i></u></xref> for additional details on the <codeph>docker-compose up</codeph> command.</p>
                    </note>
                </li>
            </ol>
            <p>To start individual  <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                    /> agents and services, run <codeph>docker-compose up</codeph> as follows:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml up -d &lt;services> </codeblock>
            <p>Replace <codeph>&lt;services></codeph> by the names of the services you want to start. For a list of the service names, refer to <xref
                    href="../install/c-install-monservice.xml"/>. </p>
            <p>Example for starting Kafka and the Notification Engine:</p>
            <p>
                <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml up -d kafka monasca-notification</codeblock>
            </p>
            <p>When starting a service that depends on other services, the other services are automatically started. If you start Kafka, for example, Zookeeper is automatically started when executing the example command. </p>
            <p>
                <note othertype="note">
                    <p>For starting the Metrics Agent, it is required to start the collector service (<codeph>agent-collector</codeph>) and the forwarder service (<codeph>agent-forwarder</codeph>).</p>
                </note>
            </p>
            <p>To stop all agents and services, proceed as follows: </p>
            <ol>
                <li>
                    <p>Log in to the <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                        /> node.</p>
                </li>
                <li>
                    <p>Go to the installation directory.</p>
                </li>
                <li>
                    <p>Run <codeph>docker-compose stop</codeph> as follows: </p>
                    <codeblock>$ docker-compose -f docker-compose-metric.yml 
 -f docker-compose-log.yml stop</codeblock>
                </li>
            </ol>
            <p>To stop individual <ph conref="../../shared/product-name.xml#ProductNameTopic/Product_Abbr"
                    /> agents and services, run <codeph>docker-compose stop</codeph> as follows:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml stop &lt;services></codeblock>
            <p>Replace <codeph>&lt;services></codeph> by the names of the services you want to stop. For a list of the service names, refer to <xref
                    href="../install/c-install-monservice.xml"/>. </p>
            <p>Example for stopping Kafka and the Notification Engine:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml stop kafka monasca-notification</codeblock>
            <note othertype="note">
                <p>For stopping the Metrics Agent, it is required to stop the collector service (<codeph>agent-collector</codeph>) and the forwarder service (<codeph>agent-forwarder</codeph>).</p>
            </note>
            <p>To check the status of all agents and services, run <codeph>docker-compose ps</codeph> as follows:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml ps</codeblock>
            <p>To view the status of an individual container, run <codeph>docker-compose ps</codeph> as follows:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml ps &lt;services></codeblock>
            <p>Replace <codeph>&lt;services></codeph> by the names of the services you want to stop. For a list of the service names, refer to <xref
                    href="../install/c-install-monservice.xml"/>. </p>
            <p>Example:</p>
            <codeblock>$ docker-compose -f docker-compose-metric.yml -f docker-compose-log.yml ps kafka monasca-notification</codeblock>
            <note othertype="note">
                <p>Run <codeph>docker-compose ps</codeph> in a separate shell unless you used <codeph>docker-compose up -d</codeph> for installing the Monitoring Service.</p>
            </note>
        </section>
        <section>
            <title>Starting and Stopping Agents on an OpenStack Node</title>
            <p>System operation of your OpenStack platform may require that an agent used for monitoring an OpenStack service is manually stopped and restarted.</p>
            <p>To start an agent, proceed as follows:</p>
            <ol compact="no">
                <li>
                    <p>Log in to the OpenStack node on which the agent is installed.</p>
                </li>
                <li>
                    <p>To start a Metrics Agent, execute the following command:</p>
                    <codeblock>sudo systemctl start monasca-agent	</codeblock>
                    <p>To start a Log Agent, execute the following command:</p>
                    <codeblock>sudo systemctl start monasca-log-agent	</codeblock>
                </li>
            </ol>
            <p>To stop an agent, proceed as follows:</p>
            <ol compact="no">
                <li>
                    <p>Log in to the OpenStack node on which the agent is installed.</p>
                </li>
                <li>
                    <p>To stop a Metrics Agent, execute the following command:</p>
                    <codeblock>sudo systemctl stop monasca-agent</codeblock>
                    <p>To stop a Log Agent, execute the following command:</p>
                    <codeblock>sudo systemctl stop monasca-log-agent</codeblock>
                </li>
            </ol>
        </section>
    </conbody>
</concept>
